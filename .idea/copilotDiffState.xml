<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/lavazza/ciclocafe/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/lavazza/ciclocafe/MainActivity.kt" />
              <option name="originalContent" value="package com.lavazza.ciclocafe&#10;&#10;import android.os.Bundle&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.Toolbar&#10;import androidx.core.os.bundleOf&#10;import androidx.core.view.isVisible&#10;import androidx.navigation.NavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.NavigationUI&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var navController: NavController&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        val toolbar: Toolbar = findViewById(R.id.toolbar)&#10;        setSupportActionBar(toolbar)&#10;&#10;        val navHostFragment = supportFragmentManager&#10;            .findFragmentById(R.id.nav_host_fragment_content_main) as NavHostFragment&#10;        navController = navHostFragment.navController&#10;&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.nav_home,&#10;                R.id.nav_entrada,&#10;                R.id.nav_salida,&#10;                R.id.nav_reparto&#10;            )&#10;        )&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;&#10;        val bottomNav: BottomNavigationView = findViewById(R.id.bottomNavigation)&#10;        NavigationUI.setupWithNavController(bottomNav, navController)&#10;&#10;        bottomNav.setOnItemSelectedListener { item: MenuItem -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_logout -&gt; {&#10;                    mostrarDialogoCerrarSesion()&#10;                    // Devolvemos false para no cambiar la selección si el usuario cancela&#10;                    false&#10;                }&#10;                R.id.nav_entrada -&gt; {&#10;                    val args = bundleOf(&quot;tipo_operacion&quot; to &quot;entrada&quot;)&#10;                    navController.navigate(R.id.nav_reparto, args)&#10;                    true&#10;                }&#10;                R.id.nav_salida -&gt; {&#10;                    val args = bundleOf(&quot;tipo_operacion&quot; to &quot;salida&quot;)&#10;                    navController.navigate(R.id.nav_reparto, args)&#10;                    true&#10;                }&#10;                else -&gt; NavigationUI.onNavDestinationSelected(item, navController)&#10;            }&#10;        }&#10;&#10;        navController.addOnDestinationChangedListener { _, destination, _ -&gt;&#10;            bottomNav.isVisible = when (destination.id) {&#10;                R.id.nav_home, R.id.nav_entrada, R.id.nav_salida, R.id.nav_reparto -&gt; true&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mostrarDialogoCerrarSesion() {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Cerrar sesión&quot;)&#10;            .setMessage(&quot;¿Querés cerrar sesión?&quot;)&#10;            .setPositiveButton(&quot;Sí&quot;) { _, _ -&gt;&#10;                val navOptions = androidx.navigation.navOptions {&#10;                    popUpTo(R.id.mobile_navigation) { inclusive = true }&#10;                }&#10;                navController.navigate(R.id.nav_login, null, navOptions)&#10;            }&#10;            .setNegativeButton(&quot;No&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    // Remove top app bar menu&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        return false&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return super.onOptionsItemSelected(item)&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.lavazza.ciclocafe&#10;&#10;import android.os.Bundle&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.Toolbar&#10;import androidx.core.os.bundleOf&#10;import androidx.core.view.isVisible&#10;import androidx.navigation.NavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.NavigationUI&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var navController: NavController&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        val toolbar: Toolbar = findViewById(R.id.toolbar)&#10;        setSupportActionBar(toolbar)&#10;&#10;        val navHostFragment = supportFragmentManager&#10;            .findFragmentById(R.id.nav_host_fragment_content_main) as NavHostFragment&#10;        navController = navHostFragment.navController&#10;&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.nav_home,&#10;                R.id.nav_entrada,&#10;                R.id.nav_salida,&#10;                R.id.nav_reparto&#10;            )&#10;        )&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;&#10;        val bottomNav: BottomNavigationView = findViewById(R.id.bottomNavigation)&#10;        NavigationUI.setupWithNavController(bottomNav, navController)&#10;&#10;        bottomNav.setOnItemSelectedListener { item: MenuItem -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_logout -&gt; {&#10;                    mostrarDialogoCerrarSesion()&#10;                    // Devolvemos false para no cambiar la selección si el usuario cancela&#10;                    false&#10;                }&#10;                R.id.nav_entrada -&gt; {&#10;                    val args = bundleOf(&quot;tipo_operacion&quot; to &quot;entrada&quot;)&#10;                    navController.navigate(R.id.nav_reparto, args)&#10;                    true&#10;                }&#10;                R.id.nav_salida -&gt; {&#10;                    val args = bundleOf(&quot;tipo_operacion&quot; to &quot;salida&quot;)&#10;                    navController.navigate(R.id.nav_reparto, args)&#10;                    true&#10;                }&#10;                else -&gt; NavigationUI.onNavDestinationSelected(item, navController)&#10;            }&#10;        }&#10;&#10;        navController.addOnDestinationChangedListener { _, destination, _ -&gt;&#10;            bottomNav.isVisible = when (destination.id) {&#10;                R.id.nav_home, R.id.nav_entrada, R.id.nav_salida, R.id.nav_reparto -&gt; true&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mostrarDialogoCerrarSesion() {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Cerrar sesión&quot;)&#10;            .setMessage(&quot;¿Querés cerrar sesión?&quot;)&#10;            .setPositiveButton(&quot;Sí&quot;) { _, _ -&gt;&#10;                // Limpiar la sesión del usuario&#10;                val sessionManager = com.lavazza.ciclocafe.utils.SessionManager(this)&#10;                sessionManager.clearSession()&#10;&#10;                val navOptions = androidx.navigation.navOptions {&#10;                    popUpTo(R.id.mobile_navigation) { inclusive = true }&#10;                }&#10;                navController.navigate(R.id.nav_login, null, navOptions)&#10;            }&#10;            .setNegativeButton(&quot;No&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    // Remove top app bar menu&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        return false&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return super.onOptionsItemSelected(item)&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/lavazza/ciclocafe/ui/home/HomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/lavazza/ciclocafe/ui/home/HomeFragment.kt" />
              <option name="updatedContent" value="package com.lavazza.ciclocafe.ui.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.navigation.fragment.findNavController&#10;import com.lavazza.ciclocafe.R&#10;import com.lavazza.ciclocafe.databinding.FragmentHomeBinding&#10;import com.lavazza.ciclocafe.utils.NetworkUtils&#10;import com.lavazza.ciclocafe.utils.SessionManager&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var homeViewModel: HomeViewModel&#10;    private lateinit var sessionManager: SessionManager&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        homeViewModel = ViewModelProvider(this)[HomeViewModel::class.java]&#10;        sessionManager = SessionManager(requireContext())&#10;&#10;        // Mostrar saludo personalizado con el nombre del usuario&#10;        val userName = sessionManager.getUserName()&#10;        binding.tvFechaActual.text = &quot;Hola, $userName&quot;&#10;&#10;        // Configurar listeners para las cards&#10;        binding.cardEntrada.setOnClickListener {&#10;            checkNetworkAndNavigate(&quot;entrada&quot;)&#10;        }&#10;&#10;        binding.cardSalida.setOnClickListener {&#10;            checkNetworkAndNavigate(&quot;salida&quot;)&#10;        }&#10;&#10;        // Observar cambios en las estadísticas&#10;        homeViewModel.entradasCount.observe(viewLifecycleOwner) { count -&gt;&#10;            binding.tvEntradasCount.text = count.toString()&#10;            actualizarResumen()&#10;        }&#10;&#10;        homeViewModel.salidasCount.observe(viewLifecycleOwner) { count -&gt;&#10;            binding.tvSalidasCount.text = count.toString()&#10;            actualizarResumen()&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        actualizarResumen()&#10;    }&#10;&#10;    private fun checkNetworkAndNavigate(tipoOperacion: String) {&#10;        if (!NetworkUtils.isConnectedToWifi(requireContext())) {&#10;            Toast.makeText(&#10;                context,&#10;                &quot;⚠️ No está conectado a WiFi. Conéctese a la red de la empresa para continuar.&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;        } else {&#10;            val bundle = Bundle().apply {&#10;                putString(&quot;tipo_operacion&quot;, tipoOperacion)&#10;            }&#10;            findNavController().navigate(R.id.nav_reparto, bundle)&#10;        }&#10;    }&#10;&#10;    private fun actualizarResumen() {&#10;        val entradas = homeViewModel.entradasCount.value ?: 0&#10;        val salidas = homeViewModel.salidasCount.value ?: 0&#10;        val total = entradas + salidas&#10;&#10;        binding.tvResumenDia.text = when {&#10;            total == 0 -&gt; &quot;Sin operaciones&quot;&#10;            total == 1 -&gt; &quot;1 operación registrada&quot;&#10;            else -&gt; &quot;$total operaciones registradas&quot;&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>